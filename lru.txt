public class lru {
    static boolean search(int arr[],int k){
        for(int i=0;i<arr.length;i++){
            if(arr[i]==k)
                return true;
        }
        return false;
    }
    static int predict(int pg[],int[]fr,int pn,int index){
        int res=-1,farthest=index;
        for(int i=0;i<fr.length;i++){
            int j;
            for(j=index;j>=0;j--){
                if(fr[i]==pg[j]){
                    if(j<farthest){
                        farthest=j;
                        res=i;
                    }
                    break;
                }
            }
            if(j==-1)
                return i;
        }
        return (res==-1)?0:res;
    }

    static void optimalPage(int pg[],int pn,int fn){
        int fr[]=new int[fn];
        for(int i=0;i<fn;i++){
            fr[i]=-1;
        }
        int hit=0;
        int index=0;
        for(int i=0;i<pn;i++){
            if(search(fr,pg[i])) {
                hit++;
                for(int a:fr)
                    System.out.print(a+" ");
                System.out.println();
                continue;
            }
            if(index<fn)
                fr[index++]=pg[i];
            else{
                int j=predict(pg,fr,pn,i-1);
                fr[j]=pg[i];
            }
            for(int a:fr)
            System.out.print(a+" ");
            System.out.println();
        }
        double hr=(double)hit/(double)pn;
        System.out.println("No of hits :" + hit);
        System.out.println("No. of misses :" + (pn-hit));
        System.out.println("hit ratio :" + hr);
    }
    public static void main(String[] args) {
        int pages[]={7,0,1,2,0,3,0,4,2,3,0,3,2,1};
        int pn=pages.length;
        int fn=3;
        optimalPage(pages,pn,fn);
    }
}
